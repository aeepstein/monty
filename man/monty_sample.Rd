% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sample.R
\name{monty_sample}
\alias{monty_sample}
\title{Sample from a model}
\usage{
monty_sample(
  model,
  sampler,
  n_steps,
  initial = NULL,
  n_chains = 1L,
  runner = NULL,
  restartable = FALSE,
  burnin = NULL,
  thinning_factor = NULL
)
}
\arguments{
\item{model}{The model to sample from; this should be a
\code{monty_model} for now, but we might change this in future to
test to see if things match an interface rather than a
particular class attribute.}

\item{sampler}{A sampler to use.  These will be described later,
but we hope to make these reasonably easy to implement so that
we can try out different sampling ideas.  For now, the only
sampler implemented is \code{\link[=monty_sampler_random_walk]{monty_sampler_random_walk()}}.}

\item{n_steps}{The number of steps to run the sampler for.}

\item{initial}{Optionally, initial parameter values for the
sampling.  If not given, we sample from the model (or its prior).}

\item{n_chains}{Number of chains to run.  The default is to run a
single chain, but you will likely want to run more.}

\item{runner}{A runner for your chains.  The default option is to
run chains in series (via \link{monty_runner_serial}).  The only
other current option is \link{monty_runner_parallel} which uses the
\code{parallel} package to run chains in parallel.  If you only run
one chain then this argument is best left alone.}

\item{restartable}{Logical, indicating if the chains should be
restartable.  This will add additional data to the chains
object.}

\item{burnin}{Number of steps to discard as burnin.  This affects
only the recording of steps as your chains run; we don't record
the first \code{burnin} steps.  Generally you would want to do this
in post-processing as this data is discarded with no chance of
getting it back.  However, if your observation process creates a
large amount of data, then you may prefer to apply a burnin here
to reduce how much memory is used.}

\item{thinning_factor}{A thinning factor to apply while the chain
is running.  If given, then we save every \code{thinning_factor}'th
step.  So if \code{thinning_factor = 2} we save every second step,
and if 10, we'd save every 10th.  Like \code{burnin} above, it is
preferable to apply this in post processing.  However, for
slow-mixing chains that have a large observer output you can use
this to reduce the memory usage.  Use of \code{thinning_factor}
requires that \code{n_steps} is an even multiple of
\code{thinning_factor}; so if \code{thinning_factor} is 10, then \code{n_steps}
must be a multiple of 10.  This ensures that the last step is in
the sample.  The thinning factor cannot be changed when
continuing a chain.}
}
\value{
A list of parameters and densities.  We provide conversion
to formats used by other packages, notably
\link[posterior:draws_array]{posterior::as_draws_array}, \link[posterior:draws_df]{posterior::as_draws_df} and
\link[coda:mcmc.list]{coda::as.mcmc.list}; please let us know if you need conversion
to something else.  If you want to work directly with the
output, the elements in the list include:
\itemize{
\item \code{pars}: An array with three dimensions representing (in turn)
parameter, sample and chain, so that \code{pars[i, j, k]} is the
\code{i}th parameter from the \code{j}th sample from the \code{k}th chain.  The
rows will be named with the names of the parameters, from your
model.
\item \code{density}: A matrix of model log densities, with \code{n_steps} rows
and \code{n_chains} columns.
\item \code{initial}: A record of the initial conditions, a matrix with as
many rows as you have parameters and \code{n_chains} columns (this is
the same format as the matrix form of the \code{initial} input
parameter)
\item \code{details}: Additional details reported by the sampler; this will
be a list of length \code{n_chains} (or \code{NULL}) and the details
depend on the sampler.  This one is subject to change.
\item \code{observations}: Additional details reported by the model.  This
one is also subject to change.
}
}
\description{
Sample from a model.  Uses a Monte Carlo method (or possibly
something else in future) to generate samples from your
distribution.  This is going to change a lot in future, as we add
support for distributing over workers, and for things like
parallel reproducible streams of random numbers.  For now it just
runs a single chain as a proof of concept.
}
\examples{
m <- monty_example("banana")
s <- monty_sampler_hmc(epsilon = 0.1, n_integration_steps = 10)
samples <- monty_sample(m, s, 2000)

# Quick conversion of parameters into something plottable:
pars <- t(drop(samples$pars))
plot(pars, pch = 19, cex = 0.75, col = "#0000ff55")

# If you have the posterior package you might prefer converting to
# its format for performing diagnoses:
\dontshow{if (requireNamespace("posterior")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
res <- posterior::as_draws_df(samples)
posterior::summarise_draws(res)

# At this point you could also use the 'bayesplot' package to plot
# diagnostics.
\dontshow{\}) # examplesIf}
}
